---
import Layout from "@layouts/Layout.astro";
import Query from "@components/Query.astro";
import queries from "@content/data/queries.yml";
import conceptual from "../images/conceptual_schema.png";
import relational from "../images/relational_schema.jpg";
---

<Layout>
	<main slot="main">
		<h1>Ochrana živočichů</h1>
		<div>
			<h2>Popis</h2>
			<p>
				Světová organizace pro ochranu oceánů mapuje a chrání mořský život,
				vyžaduje informace jako jméno každého zvířete, jeho stravu, ohroženost,
				řád a latinský název. Monitorují zastoupení druhů v ekosystémech, aby
				předešli nerovnováze a vydávají vyhlášky pro ohrožené druhy s uvedením
				důvodů, jako je přelov nebo znečištění.
			</p>
			<p>
				Organizace udržuje komplexní záznamy o zaměstnancích, včetně jmen,
				národností, platů, adres a unikátního, neměnného osobního čísla každého
				zaměstnance. Někteří zaměstnanci mají podřízené, zatímco místní pobočky
				řeší detaily jako peněžní bonusy.
			</p>
			<p>
				Pro získávání finančních prostředků organizace pořádá různé akce, včetně
				plaveb lodí, potápění a pozorování velryb, často vedeno
				zaměstnanci-průvodci, jejichž ID a bonusové platy jsou sledovány. Kromě
				toho nabízejí symbolické adopce zvířat; zákazníci přispějí minimálně 500
				Kč a obdrží certifikát a plyšovou hračku adoptovaného zvířete.
			</p>
		</div>
		<div>
			<h2>Konceptuální schéma</h2>
			<img
				loading="lazy"
				alt="Conceptual schema of database"
				src={conceptual.src}
			/>
			<strong>V diagramu jsou dvě smyčky:</strong>
			<ul>
				<li>
					<strong>Zaměstnanec-Zaměstnanec:</strong>
					 To představuje vztah nadřízeného a podřízeného. Může nastat situace,
					kdy zaměstnanec je svým vlastním nadřízeným.
				</li>
				<li>
					<strong>Zaměstnanec-Průvodce-Akce-Zákazník-Adresa-Zaměstnanec:</strong
					>
					 Tato smyčka zahrnuje zaměstnance a zákazníka, kteří se současně
					účastní (nebo neúčastní) akce a mají také nějakou adresu. To není
					problém, protože se jedná o odlišné vazby.
				</li>
			</ul>
		</div>
		<div>
			<h2>Relační schéma</h2>
			<img
				loading="lazy"
				alt="Relational schema of database"
				src={relational.src}
			/>
		</div>
		<h2>Dotazy</h2>
		<ol id="queries">
			{
				queries.map((item: any) => {
					return <Query {...item} />;
				})
			}
		</ol>
		<div>
			<h2>SQL Statements Cover</h2>
			<table class="styled">
				<tr>
					<th>Category</th>
					<th>Category Statement Description</th>
				</tr>
				<tr>
					<td>A</td>
					<td
						>Simple (positive) query with at least two joined tables (list of
						patients - name, address who were examined by doctor Braun)</td
					>
				</tr>
				<tr>
					<td>B</td>
					<td
						>Simple (negative) query (list of patients - name, address who were
						not visiting doctor Braun) (select all doctors who had patients,...)</td
					>
				</tr>
				<tr>
					<td>C</td>
					<td
						>Choose all records, which have relation for "X" only …(list of
						patients - name, address who were examined by doctor Braun ONLY -
						the patients didn't have visit at another doctor).</td
					>
				</tr>
				<tr>
					<td>D1</td>
					<td
						>Select all records which are at the relation with all.General
						quantified query (list of doctors - name, address who were visited
						by EACH patient, who visited doctor Braun)</td
					>
				</tr>
				<tr>
					<td>D2</td>
					<td is:raw
						>The result validity check from category D1. For example if query
						{list of teachers, who had lecture during ALL semesters begin at
						winter 2001/2002 till summer semester 2008/2008 included} shows the
						teacher "123 Josef Pavlicek", so the validity check will be query
						{{list of all semester at the season, where was teaching Pavlicek }\
						(minus){list of all semester at the season}} and the result must be
						empty.</td
					>
				</tr>
				<tr>
					<td>F1</td>
					<td>join - JOIN ON</td>
				</tr>
				<tr>
					<td>F2</td>
					<td>NATURAL JOIN | JOIN USING</td>
				</tr>
				<tr>
					<td>F3</td>
					<td>CROSS JOIN</td>
				</tr>
				<tr>
					<td>F4</td>
					<td>LEFT | RIGHT OUTER JOIN</td>
				</tr>
				<tr>
					<td>F5</td>
					<td>FULL (OUTER) JOIN</td>
				</tr>
				<tr>
					<td>G1</td>
					<td>Subquery inside WHERE</td>
				</tr>
				<tr>
					<td>G2</td>
					<td>Subquery inside FROM</td>
				</tr>
				<tr>
					<td>G3</td>
					<td>Subquery inside SELECT</td>
				</tr>
				<tr>
					<td>G4</td>
					<td>Correlated subquery (EXISTS | NOT EXISTS)</td>
				</tr>
				<tr>
					<td>H1</td>
					<td>Set union query - UNION</td>
				</tr>
				<tr>
					<td>H2</td>
					<td>Set substraction query - EXCEPT or MINUS (v Oracle)</td>
				</tr>
				<tr>
					<td>H3</td>
					<td>Set intersection - INTERSECT</td>
				</tr>
				<tr>
					<td>I1</td>
					<td>Aggregation functions (count | sum | min | max| avg)</td>
				</tr>
				<tr>
					<td>I2</td>
					<td>Aggregations with GROUP BY (HAVING) clause</td>
				</tr>
				<tr>
					<td>J</td>
					<td>The same query using three different formulations in SQL</td>
				</tr>
				<tr>
					<td>K</td>
					<td
						>All select clauses - SELECT FROM WHERE GROUP BY HAVING ORDER BY</td
					>
				</tr>
				<tr>
					<td>L</td>
					<td>Make VIEW</td>
				</tr>
				<tr>
					<td>M</td>
					<td>View used query</td>
				</tr>
				<tr>
					<td>N</td>
					<td
						>Insert statement for inserting list of records - INSERT without
						clause VALUES use, for example ( add customer ID 6 all green boats
						reservation for all needed time intervals)</td
					>
				</tr>
				<tr>
					<td>O</td>
					<td>UPDATE statement with subquery in WHERE/SET</td>
				</tr>
				<tr>
					<td>P</td>
					<td>DELETE statement with subquery in WHERE clause</td>
				</tr>
			</table>
		</div>
	</main>
</Layout>
