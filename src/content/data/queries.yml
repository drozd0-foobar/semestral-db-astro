%YAML 1.2
---
- verbose: "Vyberte všechny zákazníky, kteří neadoptovali živočicha"
  ra: "adopce!*>zakaznik"
  sql: |
    SELECT *
    FROM Zakaznik
    WHERE Zakaznik.id_zakaznik NOT IN (SELECT id_zakaznik FROM Adopce);

- verbose: "Název živočicha, který je kriticky ohrožený"
  ra: "zivocich(ohrozenost='Critically Endangered')[nazev, raz_nazev]"
  sql: "SELECT nazev, rad_nazev FROM Zivocich WHERE ohrozenost = 'Critically Endangered';"

- verbose: "Zákazníka, který adoptoval \"Magnificent frigate bird\""
  ra: "adopce(nazev='Magnificent frigate bird')[adopce.id_zakaznik = zakaznik.id_zakaznik>zakaznik"
  sql: |
    SELECT Zakaznik.*
    FROM Zakaznik
    JOIN adopce ON (Adopce.id_zakaznik = Zakaznik.id_zakaznik) 
    WHERE nazev = 'Magnificent frigate bird';

- verbose: "Jména zákazníků, kteří jeli na akci typu 'Diving' a to 2.4.2022"
  sql: |
    SELECT 
      zakaznik.jmeno, 
      zakaznik.prijmeni 
    FROM zakaznik 
    JOIN zakaznik_akce USING (id_zakaznik) 
    JOIN akce USING (id_akce) 
    WHERE typ_akce = 'Diving' AND datum_konani = '2/4/2022';

- verbose: "Seznam živočichů, které nikdo neadoptoval"
  sql: |
    SELECT * FROM zivocich
    EXCEPT SELECT zivocich.* FROM zivocich
      JOIN adopce ON zivocich.nazev = adopce.nazev;

# check!
- code: "I1"
  verbose: "Adopci s největším příspěvkem, s nejnižším příspěvkem a poté celkovou sumu vybranou na adopcích"
  sql: "SELECT MAX(castka) FROM adopce;"

- verbose: "Jména všech zaměstnanců a z jaké země pocházejí"
  sql: |
    SELECT jmeno, prijmeni, stat 
    FROM adresa
    JOIN zamestnanec ON adresa.id_adresa=zamestnanec.id_adresa;

- verbose: "Zákazník navštívil jednu akci buď 'Whale watching', nebo 'Diving'"
  sql: |
    SELECT zakaznik.* 
    FROM zakaznik 
      JOIN zakaznik_akce ON zakaznik.id_zakaznik = zakaznik_akce.id_zakaznik 
      JOIN akce ON akce.id_akce = zakaznik_akce.id_akce 
    WHERE akce.typ_akce = 'Whale watching' 
    UNION SELECT DISTINCT zakaznik.* 
    FROM zakaznik 
      JOIN zakaznik_akce ON zakaznik.id_zakaznik = zakaznik_akce.id_zakaznik 
      JOIN akce ON akce.id_akce = zakaznik_akce.id_akce 
    WHERE akce.typ_akce = 'Diving' 
    EXCEPT SELECT DISTINCT zakaznik.* 
    FROM zakaznik 
      JOIN zakaznik_akce ON zakaznik.id_zakaznik = zakaznik_akce.id_zakaznik 
      JOIN akce ON akce.id_akce = zakaznik_akce.id_akce 
    WHERE akce.typ_akce = 'Whale watching' 
    INTERSECT SELECT DISTINCT zakaznik.* 
    FROM zakaznik
      JOIN zakaznik_akce ON zakaznik.id_zakaznik = zakaznik_akce.id_zakaznik 
      JOIN akce ON akce.id_akce = zakaznik_akce.id_akce 
    WHERE akce.typ_akce = 'Diving';

# check!
- verbose: "Smažte všechny vyhlášky, které byly vydány zaměstnanci, kteří jsou zároveň průvodce"
  sql: |
    BEGIN;
    DELETE FROM vyhlasky
    WHERE id_zamestnance IN (SELECT id_zamestnance FROM Pruvodce);
    SELECT id_vyhlasky FROM vyhlasky; 
    ROLLBACK;

# check!
- code: "G4"
  verbose: "Živočich, kterého nikdo neadoptoval"
  sql: |
    SELECT DISTINCT * FROM zivocich
    WHERE NOT EXISTS (
      SELECT * FROM adopce 
      WHERE adopce.nazev=zivocich.nazev
    );

- code: "O"
  verbose: "Pokud průvodci byli na nějaké akci, jejich plat je o 1500 kč větší. Vypsáno je jméno, příjmení a plat průvodců po úpravě."
  sql: |
    BEGIN;
    UPDATE pruvodce 
    SET plat = plat + 1500 
    WHERE 
      id_pruvodce IN(
        SELECT 
          DISTINCT pruvodce.id_pruvodce 
        FROM 
          pruvodce 
          JOIN zamestnanec ON pruvodce.id_zamestnance = zamestnanec.id_zamestnance 
          JOIN pruvodce_akce ON pruvodce.id_pruvodce = pruvodce_akce.id_pruvodce
      );
    SELECT 
      DISTINCT zamestnanec.jmeno, 
      zamestnanec.prijmeni, 
      pruvodce.plat 
    FROM 
      pruvodce 
      JOIN zamestnanec ON pruvodce.id_zamestnance = zamestnanec.id_zamestnance 
      JOIN pruvodce_akce ON pruvodce.id_pruvodce = pruvodce_akce.id_pruvodce 
    ORDER BY 
      pruvodce.plat asc;
    ROLLBACK;
    
# check!
- code: "L"
  verbose: "Všichni zákazníci, kteří přispěli na adopci více než 8000 kč, mají speciální kolonku 'stedri_darci'"
  sql: |
    CREATE OR REPLACE VIEW stedri_darci
    AS SELECT * FROM zakaznik 
      JOIN adopce USING (id_zakaznik)
    WHERE castka>8000

# check!
- code: "M"
  verbose: "Všechny adresy štědrých dárců"
  sql: "SELECT Adresa.* FROM Adresa JOIN stedri_darci USING (id_adresa)"

- verbose: "Všechny adopce a všichni zákaznci. Pokud nějaký zákazník adoptoval více živočichů, je v tabulce vícekrát. Pokud někdo neadoptoval žádného živočicha, je u něj napsané, že nic neadoptoval. Jsou seřazeni podle ohroženosti živočicha"
  sql: |
    SELECT zakaznik.jmeno, zakaznik.prijmeni, 
      COALESCE(zivocich.nazev,'Nic neadoptoval'),
      COALESCE(zivocich.ohrozenost, 'Nic neadoptoval') 
    FROM adopce 
    FULL OUTER JOIN zakaznik ON adopce.id_zakaznik = zakaznik.id_zakaznik 
    LEFT JOIN zivocich ON zivocich.nazev = adopce.nazev 
    ORDER BY CASE 
        WHEN zivocich.ohrozenost = 'Critically Endangered' THEN 1 
        WHEN zivocich.ohrozenost = 'Near Threaten' THEN 2 
        WHEN zivocich.ohrozenost = 'Endangered Species' THEN 3 
        WHEN zivocich.ohrozenost = 'Vulnerable Species' THEN 4 
        WHEN zivocich.ohrozenost = 'Nic neadoptoval' THEN 5 
    END ASC;

- verbose: "Informace o řádu živočicha z adopce číslo 22"
  sql: |
    SELECT rad.* 
    FROM rad 
      JOIN zivocich ON rad.nazev = zivocich.rad_nazev 
      JOIN adopce a ON zivocich.nazev = a.nazev 
    WHERE id_zakaznik=22;

- code: 
  verbose: "Akce, na které byli všichni průvodci"
  sql: |
    SELCET * FROM akce 
    WHERE NOT EXISTS(
      SELECT * FROM pruvodce
      WHERE NOT EXISTS ( 
        SELECT * FROM pruvodce_akce 
        WHERE pruvodce_akce.id_akce = akce.id_akce AND pruvodce.id_pruvodce = pruvodce_akce.id_pruvodce
      )
    );

- code: "P"
  sql: |
    BEGIN;
    DELETE FROM vyhlasky
    WHERE id_zamestnance IN (
      SELECT id_zamestnance
      FROM pruvodce
    ); 
    SELECT id_vyhlasky from vyhlasky;

    ROLLBACK;
- code: "N"
  sql: |
    BEGIN;
    INSERT INTO akce (id_akce, typ_akce, cena, datum_konani)
      SELECT id_akce + (
        SELECT MAX(id_akce) 
        FROM akce
      ),
      typ_akce, 
      cena,
      '1/1/2023'
    FROM akce; 
    ROLLBACK;